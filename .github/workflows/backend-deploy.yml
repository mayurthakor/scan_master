name: Deploy Backend Services (Multi-Region)

on:
  push:
    branches: [main]
    paths: ['backend/**']
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCLOUD_PROJECT_ID }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.changes.outputs.matrix }}
      has_changes: ${{ steps.changes.outputs.has_changes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Detect changed services
        id: changes
        run: |
          services=()
          
          # Check each service for changes
          changed_services=()
          
          if git diff HEAD~1 --name-only | grep -q "backend/generate_doc_summary_service/"; then
            changed_services+=("generate_doc_summary_service")
          fi
          
          if git diff HEAD~1 --name-only | grep -q "backend/chat_service/"; then
            changed_services+=("chat_service")
          fi
          
          if git diff HEAD~1 --name-only | grep -q "backend/conversion_service/"; then
            changed_services+=("conversion_service")
          fi
          
          if git diff HEAD~1 --name-only | grep -q "backend/check_upload_allowance_service/"; then
            changed_services+=("check_upload_allowance_service")
          fi
          
          if git diff HEAD~1 --name-only | grep -q "backend/delete_file_service/"; then
            changed_services+=("delete_file_service")
          fi
          
          if git diff HEAD~1 --name-only | grep -q "backend/get_download_url_service/"; then
            changed_services+=("get_download_url_service")
          fi
          
          if git diff HEAD~1 --name-only | grep -q "backend/subscription_service/"; then
            changed_services+=("subscription_service")
          fi
          
          if git diff HEAD~1 --name-only | grep -q "backend/verify_payment_service/"; then
            changed_services+=("verify_payment_service")
          fi
          
          # Create matrix
          matrix="["
          first=true
          
          for service in "${changed_services[@]}"; do
            # For conversion_service, only deploy to us-central1
            if [ "$service" = "conversion_service" ]; then
              regions=("us-central1")
            else
              regions=("us-central1" "asia-south1" "europe-west1")
            fi
            
            for region in "${regions[@]}"; do
              if [ "$first" = true ]; then
                first=false
              else
                matrix+=","
              fi
              
              case "$service" in
                "generate_doc_summary_service")
                  matrix+="{\"service\":\"generate_doc_summary_service\",\"function_name\":\"generate-doc-summary\",\"entry_point\":\"generate_doc_summary\",\"type\":\"function\",\"region\":\"$region\"}"
                  ;;
                "chat_service")
                  matrix+="{\"service\":\"chat_service\",\"function_name\":\"chat-with-document\",\"entry_point\":\"chat_with_document\",\"type\":\"function\",\"region\":\"$region\"}"
                  ;;
                "conversion_service")
                  matrix+="{\"service\":\"conversion_service\",\"service_name\":\"process-file-to-pdf\",\"type\":\"run\",\"region\":\"$region\"}"
                  ;;
                "check_upload_allowance_service")
                  matrix+="{\"service\":\"check_upload_allowance_service\",\"function_name\":\"check-upload-allowance\",\"entry_point\":\"check_upload_allowance\",\"type\":\"function\",\"region\":\"$region\"}"
                  ;;
                "delete_file_service")
                  matrix+="{\"service\":\"delete_file_service\",\"function_name\":\"delete-file\",\"entry_point\":\"delete_file\",\"type\":\"function\",\"region\":\"$region\"}"
                  ;;
                "get_download_url_service")
                  matrix+="{\"service\":\"get_download_url_service\",\"function_name\":\"get-download-url\",\"entry_point\":\"get_download_url\",\"type\":\"function\",\"region\":\"$region\"}"
                  ;;
                "subscription_service")
                  matrix+="{\"service\":\"subscription_service\",\"function_name\":\"create-subscription-order\",\"entry_point\":\"create_subscription_order\",\"type\":\"function\",\"region\":\"$region\"}"
                  ;;
                "verify_payment_service")
                  matrix+="{\"service\":\"verify_payment_service\",\"function_name\":\"verify-payment\",\"entry_point\":\"verify_payment\",\"type\":\"function\",\"region\":\"$region\"}"
                  ;;
              esac
            done
          done
          
          matrix+="]"
          
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "Matrix: $matrix"
          echo "Changed services: ${changed_services[*]}"
          
          # Set a simple boolean flag for has_changes
          if [ ${#changed_services[@]} -gt 0 ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Matrix created successfully with ${#changed_services[@]} services"
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No backend services changed - skipping deployment"
          fi

  deploy:
    needs: detect-changes
    if: needs.detect-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      max-parallel: 3
      fail-fast: false
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCLOUD_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Prepare service account key for signing services
        if: matrix.service == 'get_download_url_service'
        run: |
          echo '${{ secrets.PDF_DOWNLOADER_SA_KEY }}' > backend/get_download_url_service/service-account-key.json
      
      - name: Deploy Cloud Function
        if: matrix.type == 'function'
        run: |
          # Generate service account email based on service name
          SERVICE_ACCOUNT=""
          case "${{ matrix.service }}" in
            "generate_doc_summary_service")
              SERVICE_ACCOUNT="generate-doc-summary-sa@${{ secrets.GCLOUD_PROJECT_ID }}.iam.gserviceaccount.com"
              ;;
            "chat_service")
              SERVICE_ACCOUNT="chat-service-sa@${{ secrets.GCLOUD_PROJECT_ID }}.iam.gserviceaccount.com"
              ;;
            "check_upload_allowance_service")
              SERVICE_ACCOUNT="check-upload-allowance-sa@${{ secrets.GCLOUD_PROJECT_ID }}.iam.gserviceaccount.com"
              ;;
            "delete_file_service")
              SERVICE_ACCOUNT="delete-file-sa@${{ secrets.GCLOUD_PROJECT_ID }}.iam.gserviceaccount.com"
              ;;
            "get_download_url_service")
              SERVICE_ACCOUNT="pdf-downloader-sa@${{ secrets.GCLOUD_PROJECT_ID }}.iam.gserviceaccount.com"
              ;;
            "subscription_service")
              SERVICE_ACCOUNT="subscription-service-sa@${{ secrets.GCLOUD_PROJECT_ID }}.iam.gserviceaccount.com"
              ;;
            "verify_payment_service")
              SERVICE_ACCOUNT="verify-payment-sa@${{ secrets.GCLOUD_PROJECT_ID }}.iam.gserviceaccount.com"
              ;;
          esac
          
          # Determine environment variables based on service
          ENV_VARS=""
          
          case "${{ matrix.service }}" in
            "subscription_service")
              ENV_VARS="--set-env-vars=RAZORPAY_KEY_ID=${{ secrets.RAZORPAY_KEY_ID }}"
              ;;
            "verify_payment_service")
              ENV_VARS="--set-env-vars=RAZORPAY_KEY_ID=${{ secrets.RAZORPAY_KEY_ID }}"
              ;;
            "generate_doc_summary_service")
              ENV_VARS="--set-env-vars=GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}"
              ;;
            "chat_service")
              ENV_VARS="--set-env-vars=GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}"
              ;;
            "get_download_url_service")
              ENV_VARS="--set-env-vars=GCS_BUCKET=${{ secrets.GCS_BUCKET }}"
              ;;
            "delete_file_service")
              ENV_VARS="--set-env-vars=GCS_BUCKET=${{ secrets.GCS_BUCKET }}"
              ;;
            "check_upload_allowance_service")
              ENV_VARS="--set-env-vars=FREE_TIER_LIMIT=${{ secrets.FREE_TIER_LIMIT }}"
              ;;  
            *)
              ENV_VARS=""
              ;;
          esac
          
          echo "Service: ${{ matrix.service }}"
          echo "Type: ${{ matrix.type }}"
          echo "Deploying ${{ matrix.function_name }} to ${{ matrix.region }}"
          echo "Service account: $SERVICE_ACCOUNT"
          echo "Environment variables: $ENV_VARS"
          
          gcloud functions deploy ${{ matrix.function_name }} \
            --gen2 \
            --runtime=python311 \
            --project=$PROJECT_ID \
            --region=${{ matrix.region }} \
            --source=backend/${{ matrix.service }} \
            --entry-point=${{ matrix.entry_point }} \
            --trigger-http \
            --allow-unauthenticated \
            --service-account=$SERVICE_ACCOUNT \
            $ENV_VARS
      
      - name: Deploy Cloud Run Service
        if: matrix.type == 'run'
        run: |
          # Use the default compute service account that works
          SERVICE_ACCOUNT="757169597458-compute@developer.gserviceaccount.com"
          
          echo "Deploying ${{ matrix.service_name }} to ${{ matrix.region }}"
          echo "Service account: $SERVICE_ACCOUNT"
          
          gcloud run deploy ${{ matrix.service_name }} \
            --source=backend/${{ matrix.service }} \
            --project=$PROJECT_ID \
            --region=${{ matrix.region }} \
            --allow-unauthenticated \
            --service-account=$SERVICE_ACCOUNT \
            --port=8080 \
            --memory=2Gi \
            --cpu=1 \
            --timeout=300
      
      - name: Clean up service account key
        if: always() && matrix.service == 'get_download_url_service'
        run: |
          rm -f backend/get_download_url_service/service-account-key.json
      
      - name: Verify deployment
        run: |
          if [ "${{ matrix.type }}" = "function" ]; then
            echo "Verifying function deployment: ${{ matrix.function_name }}"
            gcloud functions describe ${{ matrix.function_name }} \
              --region=${{ matrix.region }} \
              --project=$PROJECT_ID \
              --format="value(name,status)"
          else
            echo "Verifying Cloud Run deployment: ${{ matrix.service_name }}"
            gcloud run services describe ${{ matrix.service_name }} \
              --region=${{ matrix.region }} \
              --project=$PROJECT_ID \
              --format="value(metadata.name,status.conditions[0].status)"
          fi

  notify:
    needs: [detect-changes, deploy]
    if: always() && needs.detect-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Summary
        run: |
          echo "Deployment completed!"
          echo "Project: ${{ secrets.GCLOUD_PROJECT_ID }}"
          echo "Notification email: ${{ secrets.NOTIFICATION_EMAIL }}"
          echo "Services deployed across 3 regions"